# -*- mode: snippet -*-
# name: Basic With Args Action Plus Rest
# key: csCmnds/basicArgsActionRest
# group: csCmnds
# type: snippet
# expand-env: ((yas-indent-line 'fixed) (yas-wrap-around-region 'nil))
# --
$0####+BEGIN: b:py3:cs:cmnd/classHead :cmndName "${1:commandName}" :comment "" :extent "verify" :ro "cli" :parsMand "" :parsOpt "" :argsMin 1 :argsMax 9999 :pyInv ""
####+END:
        if self.cmndDocStr(f""" #+begin_org
** [[elisp:(org-cycle)][| *CmndDesc:* | ]]  A starting point command.
        #+end_org """): return(cmndOutcome)

        action = self.cmndArgsGet("0", cmndArgsSpecDict, effectiveArgsList)
        print(action)

        actionPars = self.cmndArgsGet("1&9999", cmndArgsSpecDict, effectiveArgsList)        
        print(actionPars)
        
        for each in actionPars:
            print(each)

        return cmndOutcome.set(
            opError=cs.OpError.Success,
            opResults=None,
        )

####+BEGIN: b:py3:cs:method/typing :methodName "cmndArgsSpec" :methodType "anyOrNone" :retType "bool" :deco "default" :argsList ""
####+END:        
        """
***** Cmnd Args Specification
      """
        cmndArgsSpecDict = cs.CmndArgsSpecDict()
        cmndArgsSpecDict.argsDictAdd(
            argPosition="0",
            argName="action",
            argChoices=['list', 'print'],
            argDescription="Action to be specified by rest"
        )
        cmndArgsSpecDict.argsDictAdd(
            argPosition="1&9999",
            argName="actionPars",
            argChoices=[],
            argDescription="Rest of args for use by action"
        )

        return cmndArgsSpecDict
